//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcApplication1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Attribute> Attributes { get; set; }
        public DbSet<AttributeGroup> AttributeGroups { get; set; }
        public DbSet<AttributeGroupItem> AttributeGroupItems { get; set; }
        public DbSet<AttributeItem> AttributeItems { get; set; }
        public DbSet<AttributeType> AttributeTypes { get; set; }
        public DbSet<BanquetEnquiry> BanquetEnquiries { get; set; }
        public DbSet<BanquetImageGallary> BanquetImageGallaries { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<City> Cities { get; set; }
        public DbSet<ContactSubject> ContactSubjects { get; set; }
        public DbSet<ContactU> ContactUs { get; set; }
        public DbSet<ContentType> ContentTypes { get; set; }
        public DbSet<Coupon> Coupons { get; set; }
        public DbSet<CouponOrderMapping> CouponOrderMappings { get; set; }
        public DbSet<CouponOutletMapping> CouponOutletMappings { get; set; }
        public DbSet<Cuisine> Cuisines { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerActivityCode> CustomerActivityCodes { get; set; }
        public DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public DbSet<CustomerHistory> CustomerHistories { get; set; }
        public DbSet<CustomerRole> CustomerRoles { get; set; }
        public DbSet<CustomerToken> CustomerTokens { get; set; }
        public DbSet<CustomerVerification> CustomerVerifications { get; set; }
        public DbSet<EmailSubscriber> EmailSubscribers { get; set; }
        public DbSet<ErrorLog> ErrorLogs { get; set; }
        public DbSet<Facility> Facilities { get; set; }
        public DbSet<HomeImageGallary> HomeImageGallaries { get; set; }
        public DbSet<ImportMenuTemp> ImportMenuTemps { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<Log> Logs { get; set; }
        public DbSet<MessageTemplate> MessageTemplates { get; set; }
        public DbSet<MobileBanner> MobileBanners { get; set; }
        public DbSet<OccasionType> OccasionTypes { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderActivityCode> OrderActivityCodes { get; set; }
        public DbSet<OrderDeliveryType> OrderDeliveryTypes { get; set; }
        public DbSet<OrderHistory> OrderHistories { get; set; }
        public DbSet<OrderItem> OrderItems { get; set; }
        public DbSet<OrderItemAttributeItem> OrderItemAttributeItems { get; set; }
        public DbSet<OrderNote> OrderNotes { get; set; }
        public DbSet<OrderSource> OrderSources { get; set; }
        public DbSet<OrderStatu> OrderStatus { get; set; }
        public DbSet<OrderTax> OrderTaxes { get; set; }
        public DbSet<Outlet> Outlets { get; set; }
        public DbSet<OutletBanquet> OutletBanquets { get; set; }
        public DbSet<OutletBanquetPackage> OutletBanquetPackages { get; set; }
        public DbSet<OutletBuffet> OutletBuffets { get; set; }
        public DbSet<OutletContact> OutletContacts { get; set; }
        public DbSet<OutletCuisineMapping> OutletCuisineMappings { get; set; }
        public DbSet<OutletDetail> OutletDetails { get; set; }
        public DbSet<OutletFacilityMapping> OutletFacilityMappings { get; set; }
        public DbSet<OutletFixedMeal> OutletFixedMeals { get; set; }
        public DbSet<OutletImageGallary> OutletImageGallaries { get; set; }
        public DbSet<OutletMedia> OutletMedias { get; set; }
        public DbSet<OutletOffer> OutletOffers { get; set; }
        public DbSet<OutletProductExclude> OutletProductExcludes { get; set; }
        public DbSet<OutletRating> OutletRatings { get; set; }
        public DbSet<OutletTiming> OutletTimings { get; set; }
        public DbSet<Permission> Permissions { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductCategoryMapping> ProductCategoryMappings { get; set; }
        public DbSet<QueuedEmail> QueuedEmails { get; set; }
        public DbSet<QueuedSM> QueuedSMS { get; set; }
        public DbSet<Resource> Resources { get; set; }
        public DbSet<ScheduleTask> ScheduleTasks { get; set; }
        public DbSet<SearchLog> SearchLogs { get; set; }
        public DbSet<SelectionType> SelectionTypes { get; set; }
        public DbSet<Setting> Settings { get; set; }
        public DbSet<SiteContent> SiteContents { get; set; }
        public DbSet<TaxGroup> TaxGroups { get; set; }
        public DbSet<TaxGroupItem> TaxGroupItems { get; set; }
    
        [EdmFunction("Entities", "GetOutletCategoryTree")]
        public virtual IQueryable<GetOutletCategoryTree_Result> GetOutletCategoryTree(Nullable<int> outletId)
        {
            var outletIdParameter = outletId.HasValue ?
                new ObjectParameter("OutletId", outletId) :
                new ObjectParameter("OutletId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetOutletCategoryTree_Result>("[Entities].[GetOutletCategoryTree](@OutletId)", outletIdParameter);
        }
    
        public virtual ObjectResult<GetNearByOutlet_Result> GetNearByOutlet(Nullable<double> latitude, Nullable<double> longitude, Nullable<double> mapCenterLatitude, Nullable<double> mapCenterLongitude, Nullable<double> radius)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var mapCenterLatitudeParameter = mapCenterLatitude.HasValue ?
                new ObjectParameter("MapCenterLatitude", mapCenterLatitude) :
                new ObjectParameter("MapCenterLatitude", typeof(double));
    
            var mapCenterLongitudeParameter = mapCenterLongitude.HasValue ?
                new ObjectParameter("MapCenterLongitude", mapCenterLongitude) :
                new ObjectParameter("MapCenterLongitude", typeof(double));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("Radius", radius) :
                new ObjectParameter("Radius", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNearByOutlet_Result>("GetNearByOutlet", latitudeParameter, longitudeParameter, mapCenterLatitudeParameter, mapCenterLongitudeParameter, radiusParameter);
        }
    
        public virtual int ImportMenuItems(Nullable<int> rESTAURANTID)
        {
            var rESTAURANTIDParameter = rESTAURANTID.HasValue ?
                new ObjectParameter("RESTAURANTID", rESTAURANTID) :
                new ObjectParameter("RESTAURANTID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportMenuItems", rESTAURANTIDParameter);
        }
    }
}
